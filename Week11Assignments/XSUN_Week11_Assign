{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Week 11 Assignment - Custom Functions and Plotting"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write a function that will read in this week's county-level covid data (\"covidData_4.7.20.csv\") and create a line plot showing increases in cumulative case counts or deaths through time for  a particular state. The line plot should have labeled axes and a grid.\n",
    "\n",
    "The function should accept two arguments. The first argument should be the name of the state. The second should indicate whether the user wants to plot case counts or deaths (defaulting to case counts). You will need to write a second function that calculates the case counts per state per day, summing across counties/parishes.\n",
    "\n",
    "As always, remember to document your code, including docstrings for functions.\n",
    "\n",
    "NOTE 1: One thing that tripped me up initially - not all counties/parishes have fips codes in this dataset. So that field may be empty for some lines in the file.\n",
    "\n",
    "NOTE 2: Remember that when you first read from a file, everything is considered a string. To get proper plots, you'll need to convert numbers stored as strings to actual numbers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import needed modules here\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import copy\n",
    "import re"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Author:Xiuxuan Sun\n",
    "# Please change the infile location when you want to rerun these code.\n",
    "# I retrieve the date, cases, deaths of a particluar state and calculate the cumulative number and store it into a DateDict\n",
    "\n",
    "def dataRetrival(StateName,plotOpt=\"case_counts\"):\n",
    "    inFile = open(\"E:\\Course\\BIOL4800\\CustomFunctions_Plotting_Week11-master\\covidData_4.7.20.csv\",'r')\n",
    "    statelines = re.findall(r'(.+),\\w+,%s,.*,(.+),(.+)' %StateName, inFile.read())\n",
    "    inFile.close()\n",
    "    DateDict={}\n",
    "    for i in range(len(statelines)):\n",
    "        date=statelines[i][0]\n",
    "        if plotOpt==\"case_counts\":\n",
    "            if date not in DateDict:\n",
    "                DateDict.update({statelines[i][0]:int(statelines[i][1])})\n",
    "            else:\n",
    "                DateDict[date] = int(DateDict[date]) + int(statelines[i][1])\n",
    "        else:\n",
    "            if date not in DateDict:\n",
    "                DateDict.update({statelines[i][0]:int(statelines[i][2])})\n",
    "            else:\n",
    "                DateDict[date] = int(DateDict[date]) + int(statelines[i][2])\n",
    "                \n",
    "    lists = DateDict.items() # return a list of tuples\n",
    "    x, y = zip(*lists) # unpack a list of pairs into two tuples\n",
    "    plt.xlabel(\"Date\")\n",
    "    if plotOpt==\"case_counts\":\n",
    "        plt.ylabel(\"Cumulative Case Counts\")\n",
    "    else:\n",
    "        plt.ylabel(\"Cumulative Death Counts\")\n",
    "    plt.plot(x, y)\n",
    "    plt.grid(True)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Use your function to create a plot here\n",
    "dataRetrival(\"Louisiana\", \"death_count\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write a second function that is similar to the first, but shows increases in cumulative case counts or deaths through time for a particular county/parish in a particular state.\n",
    "\n",
    "The function should accept three arguments. The first argument should be the name of the county/parish. The second should be the name of the state. The third should indicate whether the user wants to plot case counts or deaths (defaulting to case counts).\n",
    "\n",
    "As always, remember to document your code, including docstrings for functions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Please change the infile location when you want to rerun these code.\n",
    "# I retrieve the date, cases, deaths of a particluar parish/country from a state and calculate the cumulative number and store it into a DateDict\n",
    "\n",
    "def ParishDataRetrival(ParishName,StateName,plotOpt=\"case_counts\"):\n",
    "    inFile = open(\"E:\\Course\\BIOL4800\\CustomFunctions_Plotting_Week11-master\\covidData_4.7.20.csv\",'r')\n",
    "    statelines = re.findall(r'(.+),%s,%s,.*,(.+),(.+)' %(ParishName,StateName), inFile.read())    \n",
    "    inFile.close()\n",
    "    DateDict={}\n",
    "    for i in range(len(statelines)):\n",
    "        date=statelines[i][0]\n",
    "        if plotOpt==\"case_counts\":\n",
    "            if date not in DateDict:\n",
    "                DateDict.update({statelines[i][0]:int(statelines[i][1])})\n",
    "            else:\n",
    "                DateDict[date] = int(DateDict[date]) + int(statelines[i][1])\n",
    "        else:\n",
    "            if date not in DateDict:\n",
    "                DateDict.update({statelines[i][0]:int(statelines[i][2])})\n",
    "            else:\n",
    "                DateDict[date] = int(DateDict[date]) + int(statelines[i][2])\n",
    "                \n",
    "    lists = DateDict.items() # return a list of tuples\n",
    "    x, y = zip(*lists) # unpack a list of pairs into two tuples\n",
    "    plt.xlabel(\"Date\")\n",
    "    if plotOpt==\"case_counts\":\n",
    "        plt.ylabel(\"Cumulative Case Counts\")\n",
    "    else:\n",
    "        plt.ylabel(\"Cumulative Death Counts\")\n",
    "    plt.plot(x, y)\n",
    "    plt.grid(True)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Use your function to create a plot here\n",
    "ParishDataRetrival(\"East Baton Rouge\",\"Louisiana\",\"death_counts\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
