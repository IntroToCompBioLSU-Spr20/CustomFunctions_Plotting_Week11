{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Week 11 Assignment - Custom Functions and Plotting"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write a function that will read in this week's county-level covid data (\"covidData_4.7.20.csv\") and create a line plot showing increases in cumulative case counts or deaths through time for  a particular state. The line plot should have labeled axes and a grid.\n",
    "\n",
    "The function should accept two arguments. The first argument should be the name of the state. The second should indicate whether the user wants to plot case counts or deaths (defaulting to case counts). You will need to write a second function that calculates the case counts per state per day, summing across counties/parishes.\n",
    "\n",
    "As always, remember to document your code, including docstrings for functions.\n",
    "\n",
    "NOTE 1: One thing that tripped me up initially - not all counties/parishes have fips codes in this dataset. So that field may be empty for some lines in the file.\n",
    "\n",
    "NOTE 2: Remember that when you first read from a file, everything is considered a string. To get proper plots, you'll need to convert numbers stored as strings to actual numbers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import needed modules here\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import copy\n",
    "import re"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Your code here...\n",
    "\n",
    "def dailyStateSum(currentDate, stateName, dataType):\n",
    "    \"\"\"Find the daily number of cases or deaths per state when provided with\n",
    "    date, state, and data type; dataType: 0 = cases, 1 = deaths\"\"\"\n",
    "    \n",
    "    inDataFile = open(\"../covidData_4.7.20.csv\",'r')\n",
    "    inData = inDataFile.read()\n",
    "    inDataFile.close()\n",
    "\n",
    "    # Enter currentDate and stateName into variable for regex\n",
    "    argInfo = currentDate + r\",.+,\" + stateName + r\".+\"\n",
    "\n",
    "    # Get all lines for stateName on currentDate\n",
    "    matchList = re.findall(argInfo, inData)\n",
    "\n",
    "    # Start sum at 0\n",
    "    sum = 0\n",
    "\n",
    "    # Going through data on currentDate in stateName\n",
    "    for match in matchList:\n",
    "        # Pull out number of cases and deaths\n",
    "        dailyCombined = re.search(r\"\\d+,\\d+$\",match).group()\n",
    "\n",
    "        # Get Cases: dataType = 0\n",
    "        if dataType == 0:\n",
    "            # Get first number from combined string, and add it to sum\n",
    "            dailyCases = re.search(r\"^\\d+\",dailyCombined).group()\n",
    "            sum = sum + int(dailyCases)\n",
    "\n",
    "        # Get Deaths: dataType = 1\n",
    "        if dataType == 1:\n",
    "            # Get last number from combined string, and add it to sum\n",
    "            dailyDeaths = re.search(r\"\\d+$\",dailyCombined).group()\n",
    "            sum = sum + int(dailyDeaths)\n",
    "\n",
    "    return sum\n",
    "\n",
    "\n",
    "def plotState(givenState, givenData=0):\n",
    "    \"\"\"Creates a line plot with a grid based on givenState and \n",
    "    givenData for cumulative cases or deaths\"\"\"\n",
    "    \n",
    "    inDataFile = open(\"../covidData_4.7.20.csv\",'r')\n",
    "    inData = inDataFile.read()\n",
    "    inDataFile.close()\n",
    "\n",
    "    # Get the line that givenState appears for first time\n",
    "    firstLineState = re.search(r\".+,.+,\" + givenState + \".+\",inData).group()\n",
    "\n",
    "    # Get the date of the first appearance of state\n",
    "    firstDate = firstLineState[:10]\n",
    "    \n",
    "    # Extract 'county,state'\n",
    "    firstCounty = re.search(r\"(\\d+-\\d+-\\d+,)(.+,.+)(,.*,.*,.*)\", firstLineState).group(2)\n",
    "    \n",
    "    # Get line of data for every time that firstCounty appears\n",
    "    dateList = re.findall(r\".+\" + firstCounty + \".+\",inData)\n",
    "    \n",
    "    # Create empty lists\n",
    "    x = []\n",
    "    y = []\n",
    "\n",
    "    # Going through data from every day that firstCounty appears\n",
    "    for i in dateList:\n",
    "        # Extract date\n",
    "        currentDate = i[:10]\n",
    "        # Get sum for all entries for a state, and add sum to y list\n",
    "        y.append(dailyStateSum(currentDate, givenState, givenData))\n",
    "\n",
    "    # Generate evenly spaced numbers from 1 to the number of y entries for days\n",
    "    # following the first case/death\n",
    "    x = np.linspace(1, len(y), len(y))\n",
    "\n",
    "    # Create plot with grid with y axis that changes according to dataType\n",
    "    if givenData == 0:\n",
    "        plt.ylabel(\"Cumulative Number of Cases in State\")\n",
    "    if givenData == 1:\n",
    "        plt.ylabel(\"Cumulative Number of Deaths in State\")\n",
    "    plt.xlabel(\"Day\")\n",
    "    plt.grid(True,alpha=0.5)\n",
    "    plt.plot(x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f43e1e9f8d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Use your function to create a plot here\n",
    "\n",
    "plotState(\"Louisiana\", 1)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write a second function that is similar to the first, but shows increases in cumulative case counts or deaths through time for a particular county/parish in a particular state.\n",
    "\n",
    "The function should accept three arguments. The first argument should be the name of the county/parish. The second should be the name of the state. The third should indicate whether the user wants to plot case counts or deaths (defaulting to case counts).\n",
    "\n",
    "As always, remember to document your code, including docstrings for functions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Your code here\n",
    "\n",
    "def plotCounty(countyName, stateName, dataType=0):\n",
    "    \"\"\"Creates a line plot with a grid when given particular county, its state,\n",
    "    and particular data type that shows cumulative cases/deaths; dataType: \n",
    "    0 = cases, 1 = deaths \"\"\"\n",
    "    \n",
    "    inDataFile = open(\"../covidData_4.7.20.csv\",'r')\n",
    "    inData = inDataFile.read()\n",
    "    inDataFile.close()\n",
    "\n",
    "    # Get data for countyName\n",
    "    countyMatches = re.findall(r\".+,\" + countyName + \",\" + stateName + \",.+\", inData)\n",
    "\n",
    "    # Create empty lists\n",
    "    x = []\n",
    "    y = []\n",
    "\n",
    "    # Go through data for countyName\n",
    "    for match in countyMatches:\n",
    "        # Get the number of cases and deaths in county\n",
    "        dailyCounts = re.search(r\"(\\d+)(,)(\\d+$)\", match)\n",
    "        # Get Cases: dataType = 0\n",
    "        if dataType == 0:\n",
    "            # Get the number of cases and add it to y list\n",
    "            y.append(int(dailyCounts.group(1)))\n",
    "        # Get Deaths: dataType = 1\n",
    "        if dataType == 1:\n",
    "            # Get of deaths and add it to y list\n",
    "            y.append(int(dailyCounts.group(3)))\n",
    "\n",
    "    # Generate evenly spaced numbers from 1 to the number of y entries for days\n",
    "    # following the first case/death\n",
    "    x = np.linspace(1, len(y), len(y))\n",
    "\n",
    "    # Create plot with grid with y axis that changes according to dataType\n",
    "    if dataType == 0:\n",
    "        plt.ylabel(\"Cumulative Number of Cases in County\")\n",
    "    if dataType == 1:\n",
    "        plt.ylabel(\"Cumulative Number of Deaths in County\")\n",
    "    plt.xlabel(\"Day\")\n",
    "    plt.grid(True,alpha=0.5)\n",
    "    plt.plot(x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f43e1e06588>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Use your function to create a plot here\n",
    "\n",
    "plotCounty(\"Jefferson\", \"Louisiana\", 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
